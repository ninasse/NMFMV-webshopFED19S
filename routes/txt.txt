const transport = nodemailer.createTransport(sendgridTransport({
    auth: { api_key: "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" }
}))
        
        
        
        // //skicka mail till användaren kommer ske här 
        // const userEmail = await UserInfoModel.findOne({
        //     email: req.body.email
        // });
        // await transport.sendMail({
        //     to: "f.vforsman@gmail.com",
        //     from: "<no-reply>Webshop-NMFVM", 
        //     subject: "Välkommen!",
        //     html: "<h1>Välkommen " + userEmail.email + "</h1>"
        // });




// router.get(ROUTE.resetpassword, (req, res) => {
//     res.status(200).render(VIEW.resetpassword, {
//         ROUTE,
//         token: (req.cookies.jsonwebtoken !== undefined) ? true : false
//     });
// })

// router.post(ROUTE.resetpassword, async (req, res) => {
//     crypto.randomBytes(32, async (error, token) => {
//         if (error) return res.redirect(VIEW.userAccount);
//         const resetToken = token.toString("hex");
//         const user = UserInfoModel.findOne({ email: req.body.resetMail })
//             .then(user => {
//                 if (!user) return res.redirect(VIEW.userAccount)
//                 user.resetToken = resetToken
//                 user.tokenExpiration = Date.now() + 1000000
//                 return user.save();
//             })
//             .then(() => {
//                 transport.sendMail({
//                     to: user.resetMail,
//                     from: "<no-reply>Byt lösenord",
//                     subject: "Ändra ditt lösenord!",
//                     html: `http://localhost:8003/reset/${resetToken} <h2>Klicka på länken för att ändra ditt lösenord!<h2>`
//                 });
//             })
//         return res.redirect(VIEW.login)
//     })
// })

// router.get(ROUTE.resetpasswordToken, async (req, res) => {
//     const token = req.params.token;
//     const user = await UserInfoModel.findOne({ resetToken: token, tokenExpiration: { $gt: Date.now() } });
//     res.render(VIEW.resetform, {
//         user,
//         ROUTE,
//         token: (req.cookies.jsonwebtoken !== undefined) ? true : false
//     })
// })

// router.post(ROUTE.resetpasswordToken, async (req, res) => {
//     const user = await UserInfoModel.findOne({ resetToken: req.body.token })
//     if (user) {
//         const hashPassword = await bcrypt.hash(req.body.password, 10);
//         user.password = hashPassword;
//         user.resetToken = undefined;
//         user.tokenExpiration = undefined;
//         await user.save();
//     }
//     res.redirect(VIEW.login);
// })
